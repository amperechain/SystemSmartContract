//SPDX-License-Identifier: MIT
pragma solidity 0.8.19; 

interface ERC20Essential 
{
    function balanceOf(address user) external view returns(uint256);
    function transfer(address _to, uint256 _amount) external returns (bool);
    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);
}


//*******************************************************************//
//------------------ Contract to Manage Ownership -------------------//
//*******************************************************************//
contract owned
{
    address public owner;
    address internal newOwner;
    mapping(address => bool) public signer;

    event OwnershipTransferred(address indexed _from, address indexed _to);
    event SignerUpdated(address indexed signer, bool indexed status);

    constructor() {
        owner = msg.sender;
        signer[msg.sender] = true;
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    modifier onlySigner {
        require(signer[msg.sender], 'caller must be signer');
        _;
    }

    function changeSigner(address _signer, bool _status) public onlyOwner {
        signer[_signer] = _status;
        emit SignerUpdated(_signer, _status);
    }

    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }

    //the reason for this flow is to protect owners from sending ownership to unintended address due to human error
    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}

    
//****************************************************************************//
//---------------------        MAIN CODE STARTS HERE     ---------------------//
//****************************************************************************//
    
contract AmpereChainValidatorReward is owned {
    
    uint256 public orderID;

    // This generates a public event of reward distribution by contract
    event DistributeReward(uint256 indexed orderID, address indexed user, uint256 value);
    
    constructor() {
        owner = address(0xe6DFd5bBB191a73A5ae01f1e1F99e533DB721b59);
        changeSigner(owner,true);
    }

    receive () external payable {
        //nothing happens for incoming fund
    }
    
    function distributeReward(address user, uint256 amount, uint256 _orderID) external onlySigner returns(bool){
        payable(user).transfer(amount);
        emit DistributeReward(_orderID, user, amount);
        return true;
    }
        
    function transferAsset(address tokenAddress, uint tokens) public onlySigner returns (bool success) {
        if (tokenAddress != address(0)){
            return ERC20Essential(tokenAddress).transfer(msg.sender, tokens);
        }
        else{
            payable(msg.sender).transfer(tokens);
            return true;
        }       
    }
}
